integrations:
- integration_type: git_repo
  git_repo: mosaicml/llm-foundry
  # git_branch: # use your branch
  # git_commit: # OR use your commit hash
  git_branch: main
  pip_install: -e .[gpu]
  ssh_clone: false # Should be true if using a private repo
- integration_type: wandb # TODO: abstract
  entity: mosaic-ml
  project: daniel-debug

# We are fetching, converting, and training on the 'val' split
# as it is small and quick to get going for this demo.
# For real training runs, follow the instructions in `llm-foundry/scripts/train/README.md`
# to convert and host the full 'train' dataset.
command: |
  cd llm-foundry/scripts
  composer train/train.py /mnt/config/parameters.yaml
image: mosaicml/llm-foundry:1.13.1_cu117-latest
name: sec-mpt-7b-large-13 # TODO: abstract

compute:
  gpus: 8  # Number of GPUs to use TODO: abstract

  ## These configurations are optional
  cluster: r1z1 # Name of the cluster to use for this run TODO: abstract
  # gpu_type: a100_80gb # Type of GPU to use. We use a100_80gb in our experiments

parameters:
  data_local: ./local-dataset-cache
  data_remote: oci://mosaicml-internal-checkpoints/daniel/data/sec-large-mds/ # TODO: abstract

  max_seq_len: 2048
  global_seed: 17

  # Run Name
  run_name: # If left blank, will be read from env var $RUN_NAME

  # Model
  model:
    name: hf_causal_lm
    pretrained_model_name_or_path: mosaicml/mpt-7b
    pretrained: true
    config_overrides:
      attn_config:
        attn_impl: triton
        attn_uses_sequence_id: true

  # Tokenizer
  tokenizer:
    name: mosaicml/mpt-7b
    kwargs:
        model_max_length: ${max_seq_len}

  # Dataloaders
  train_loader:
    name: text
    dataset:
      local: ${data_local}
      remote: ${data_remote}
      split: train
      shuffle: true
      max_seq_len: ${max_seq_len}
      shuffle_seed: ${global_seed}
      eos_token_id: 0
    drop_last: true
    num_workers: 8

  eval_loader:
    name: text
    dataset:
      local: ${data_local}
      remote: ${data_remote}
      split: validation
      shuffle: false
      max_seq_len: ${max_seq_len}
      shuffle_seed: ${global_seed}
      eos_token_id: 0
    drop_last: false
    num_workers: 8

  # Optimization
  scheduler:
    name: cosine_with_warmup
    t_warmup: 500ba
    alpha_f: 0.1

  optimizer:
    name: decoupled_lionw
    lr: 0.000006 # TODO: explain
    betas:
    - 0.9
    - 0.99
    weight_decay: 0.000006

  algorithms:
    gradient_clipping:
      clipping_type: norm
      clipping_threshold: 1.0

  max_duration: 1ep
  eval_interval: 500ba
  eval_first: false
  eval_subset_num_batches: -1
  global_train_batch_size: 128

  # FSDP
  fsdp_config:
    sharding_strategy: FULL_SHARD
    mixed_precision: PURE
    activation_checkpointing: true
    activation_checkpointing_reentrant: false
    activation_cpu_offload: false
    limit_all_gathers: true
    verbose: false

  # System
  seed: ${global_seed}
  device_eval_batch_size: 8
  device_train_microbatch_size: 20
  precision: amp_bf16

  # Logging
  progress_bar: false
  log_to_console: true
  console_log_interval: 1ba
  python_log_level: debug

  callbacks:
    generate_callback:
      batch_log_interval: 500
      do_sample: true
      max_new_tokens: 100
      prompts:
      - The quick brown fox jumps over
      - |-
        Vegan Banana Bread
        Instructions:
        1.
      - The other day I was explaining what generative AI is to my five year old.
      - We are a global semiconductor company primarily offering
      - Our company had revenue of
      - Our business operations are subject to numerous risks, including
      temperature: 1
      top_k: 50
      top_p: 0.95
      use_cache: true
    speed_monitor:
      window_size: 10
    lr_monitor: {}
    memory_monitor: {}
    runtime_estimator: {}

  loggers:
    wandb: {}

  icl_tasks:
  -
    label: piqa
    dataset_uri: eval/local_data/piqa.jsonl  # ADD YOUR OWN DATASET URI
    num_fewshot: [0]
    icl_task_type: multiple_choice
    continuation_delimiter: 'Answer: ' # this separates questions from answers
  -
    label: hellaswag
    dataset_uri: eval/local_data/hellaswag.jsonl # ADD YOUR OWN DATASET URI
    num_fewshot: [0]
    icl_task_type: multiple_choice
  -
    label: arc_easy
    dataset_uri: eval/local_data/arc_easy.jsonl # ADD YOUR OWN DATASET URI
    num_fewshot: [0]
    icl_task_type: multiple_choice
    continuation_delimiter: 'Answer: ' # this separates questions from answers

  # Checkpoint to local filesystem or remote object store
  save_interval: 500ba
  save_num_checkpoints_to_keep: 1  # Important, this cleans up checkpoints saved to DISK
  # save_folder: ./{run_name}/checkpoints
  save_folder: oci://mosaicml-internal-checkpoints/daniel/checkpoints/{run_name}/ # TODO: abstract
  save_weights_only: True
