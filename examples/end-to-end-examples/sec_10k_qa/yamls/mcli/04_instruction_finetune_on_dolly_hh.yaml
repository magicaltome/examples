integrations:
- integration_type: git_repo
  git_repo: mosaicml/llm-foundry
  # git_branch: # use your branch
  # git_commit: # OR use your commit hash
  pip_install: -e .[gpu]
  ssh_clone: false # Should be true if using a private repo
- integration_type: wandb # TODO: abstract
  entity: mosaic-ml
  project: daniel-debug

command: |
  cd llm-foundry/scripts
  composer train/train.py /mnt/config/parameters.yaml
image: mosaicml/llm-foundry:1.13.1_cu117-latest
name: sec-finetune-dolly-mpt-1 # TODO: abstract

compute:
  gpus: 8  # Number of GPUs to use

  ## These configurations are optional
  cluster: r1z1 # Name of the cluster to use for this run
  # gpu_type: a100_80gb # Type of GPU to use. We use a100_80gb in our experiments

parameters:
  max_seq_len: 2048
  global_seed: 17

  # Run Name
  run_name: # If left blank, will be read from env var $RUN_NAME

  model:
    name: mpt_causal_lm
    init_device: meta
    d_model: 4096
    n_heads: 32
    n_layers: 32
    expansion_ratio: 4
    max_seq_len: ${max_seq_len}
    vocab_size: 50432
    no_bias: true
    attn_config:
      attn_impl: triton
      # Set this to `true` if using `train_loader.dataset.packing_ratio` below
      attn_uses_sequence_id: false
      alibi: true

  # Tokenizer
  tokenizer:
    name: mosaicml/mpt-7b
    kwargs:
      model_max_length: ${max_seq_len}


  # Dataloaders
  train_loader:
    name: finetuning
    dataset:
      hf_name: mosaicml/dolly_hhrlhf
      split: train
      max_seq_len: ${max_seq_len}
      allow_pad_trimming: false
      decoder_only_format: true
      # # Use `python llmfoundry/data/packing.py --yaml-path /path/to/this/yaml/ ...`
      # # to profile this run's optimal packing_ratio as it depends on GPU count,
      # # batch size, sequence length
      # packing_ratio:
      shuffle: true
    drop_last: true
    num_workers: 8
    pin_memory: false
    prefetch_factor: 2
    persistent_workers: true
    timeout: 0

  eval_loader:
    name: finetuning
    dataset:
      hf_name: mosaicml/dolly_hhrlhf
      split: test
      max_seq_len: ${max_seq_len}
      allow_pad_trimming: false
      decoder_only_format: true
      # packing_ratio:
      shuffle: true
    drop_last: true
    num_workers: 8
    pin_memory: false
    prefetch_factor: 2
    persistent_workers: true
    timeout: 0

  # Optimization
  scheduler:
    name: linear_decay_with_warmup  # linear no warmup is HF default which dolly used
    t_warmup: 50ba  # add some warmup though, seems to help with MPT
    alpha_f: 0

  optimizer:
    # Based on Dolly
    name: decoupled_adamw
    lr: 5.0e-6
    betas:
    - 0.9
    - 0.999
    eps: 1.0e-8
    weight_decay: 0

  algorithms:
    gradient_clipping:
      clipping_type: norm
      clipping_threshold: 1.0

  max_duration: 2ep
  eval_interval: 500ba
  # eval_subset_num_batches: -1
  eval_first: true
  global_train_batch_size: 128  # somewhere in the 6-8 * numgpus range seems good

  # System
  seed: ${global_seed}
  device_eval_batch_size: 8
  device_train_microbatch_size: auto
  precision: amp_bf16

  # FSDP
  fsdp_config:
    sharding_strategy: FULL_SHARD
    mixed_precision: PURE
    activation_checkpointing: true
    activation_checkpointing_reentrant: false
    activation_cpu_offload: false
    limit_all_gathers: true
    verbose: false

  # Logging
  progress_bar: false
  log_to_console: true
  console_log_interval: 1ba
  python_log_level: debug

  callbacks:
    generate_callback:
      batch_log_interval: 500
      do_sample: true
      max_new_tokens: 100
      prompts:
      - The quick brown fox jumps over
      - |-
        Vegan Banana Bread
        Instructions:
        1.
      - The other day I was explaining what generative AI is to my five year old.
      - We are a global semiconductor company primarily offering
      - Our company had revenue of
      - Our business operations are subject to numerous risks, including
      - What was AMD's revenue in 2019?
      - What is net operating income?
      temperature: 1
      top_k: 50
      top_p: 0.95
      use_cache: true
    speed_monitor:
      window_size: 10
    lr_monitor: {}
    memory_monitor: {}
    runtime_estimator: {}

  loggers:
    wandb: {}

  # Checkpoint to local filesystem or remote object store
  save_interval: 500ba
  # save_num_checkpoints_to_keep: 1  # Important, this cleans up checkpoints saved to DISK
  # save_folder: ./{run_name}/checkpoints
  save_folder: oci://mosaicml-internal-checkpoints/daniel/checkpoints/{run_name}/ # TODO: abstract
